{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#welcome-to-the-popcorn-guineapig-documentation","title":"Welcome to the Popcorn Guineapig documentation! \ud83d\udc4b","text":"<p>The goal of this plugin is to help enforce architectural rules in your multi-module project. Once you apply the plugin and specify your architecture guidelines, the plugin will automatically verify whether your architecture adheres to these rules.</p> <p>The Popcorn Gradle Plugin supports:</p> <ul> <li> <p>Kotlin Multiplatform Projects (KMP)</p> </li> <li> <p>Java Projects</p> </li> <li> <p>Android Projects</p> </li> </ul> <p>\u26a0\ufe0f Popcorn Guineapig plugin is designed for Gradle multi-module projects.</p> <p>Take a look at our repository.</p>"},{"location":"#summary","title":"Summary","text":""},{"location":"#1-getting-started","title":"1. Getting started","text":""},{"location":"#2-existing-rules","title":"2. Existing rules","text":""},{"location":"#3-custom-rules","title":"3. Custom rules","text":""},{"location":"#4-reports","title":"4. Reports","text":""},{"location":"#5-contributions","title":"5. Contributions","text":""},{"location":"1-getting-started/","title":"Getting started \ud83d\ude80","text":""},{"location":"1-getting-started/#1-add-the-plugin-dependency","title":"1. Add the Plugin Dependency","text":"<p>Go to your build-logic folder, in the <code>build-logic/build.gradle.kts</code>, add the following dependency:</p> <pre><code>implementation(\"io.github.codandotv:popcornguineapig:&lt;version&gt;\")\n</code></pre>"},{"location":"1-getting-started/#2-apply-the-plugin","title":"2. Apply the Plugin","text":"<p>You can chose a conventional gradle plugin to define your rules. </p> <p>For example, I have a gradle plugin applied to all modules <code>kmp-library-setup.gradle.kts</code>. In this conventional plugin, you can add:</p> <pre><code>plugins {\n  ...\n  id(\"io.github.codandotv.popcorngp\")\n}\n</code></pre>"},{"location":"1-getting-started/#3-configure-your-architecture-rules","title":"3. Configure Your Architecture Rules","text":"<p>After apply the plugin, you can sync and define the architecture rules:</p> <pre><code>popcornGuineapigConfig {\n    // You also can skip rules to help duing migration\n    skippedRules = listOf(DoNotWithRule::class)\n\n    configuration = PopcornConfiguration(\n        project = PopcornProject(\n            type = ProjectType.JAVA\n        ),\n        rules = listOf(\n            NoDependencyRule(),\n            DoNotWithRule(\n                notWith = listOf(\"[a-z]+-data\")\n            )\n        )\n    )\n}\n</code></pre>"},{"location":"1-getting-started/#4-run-the-task","title":"4. Run the task","text":"<pre><code>./gradlew popcorn\n</code></pre> <p>It is simple as a popcorn \ud83c\udf7f + \ud83d\udc39</p> <p>If you want to know more details about the task, you can run:</p> <pre><code>./gradlew popcorn --info\n</code></pre> <p>Any problems you are facing, any suggestions you want to add, please feel free to reach us out.</p>"},{"location":"2-existing-rules/","title":"Existing rules \ud83d\udcd0","text":"<p>We have several rules already defined in the plugin. You can create some rule too, take a look in our section about contributions.</p>"},{"location":"2-existing-rules/#donotwithrule","title":"DoNotWithRule","text":"<p>The <code>DoNotWithRule</code> specifies that the target module should not depend on certain modules. For example:</p> <pre><code>popcornGuineapigConfig {\n    configuration = PopcornConfiguration(\n        ...\n        rules = listOf(\n            DoNotWithRule(\n                notWith = listOf(\"[a-z]+-data\")\n            )\n        )\n    )\n}\n</code></pre> <p>In this case, the current module should not depend on any module whose name includes \u2018something-data\u2019. A good rule if you are dealing with presentation modules, you can force the developer use a domain module instead of a data module.</p>"},{"location":"2-existing-rules/#justwithrule","title":"JustWithRule","text":"<p>The <code>JustWithRule</code> specifies that the target module should depend on certain modules. For example:</p> <pre><code>popcornGuineapigConfig {\n    configuration = PopcornConfiguration(\n        ...\n        rules = listOf(\n            JustWithRule(\n                justWith = listOf(\"util-[a-z]+\")\n            )\n        )\n    )\n}\n</code></pre> <p>In this case, the current module should depend on any module whose name includes \u2018util-something\u2019. This rule is useful if you need to enforce that a module depends only on utility modules.</p>"},{"location":"2-existing-rules/#nodependencyrule","title":"NoDependencyRule","text":"<p>The <code>NoDependencyRule</code> ensures that the target module remains free of any dependencies. For example:</p> <pre><code>popcornGuineapigConfig {\n    configuration = PopcornConfiguration(\n        ...\n        rules = listOf(\n            NoDependencyRule()\n        )\n    )\n}\n</code></pre> <p>In this case, the current module should be free of any dependencies. This rule is useful if you want to make sure your domain modules are free of any dependencies.</p>"},{"location":"2-existing-rules/#popcornguineapigrule","title":"PopcornGuineaPigRule","text":"<p>Take a look in our documentation about how you can create your custom rule.</p>"},{"location":"3-custom-rules/","title":"Custom rules \ud83d\udcdd","text":""},{"location":"3-custom-rules/#create-your-rule","title":"Create your rule","text":"<p>You also can create custom rules:</p> <pre><code>class MyRule : PopcornGuineaPigRule {\n    override fun check(deps: List&lt;InternalDependenciesMetadata&gt;): ArchitectureViolationError? {\n        return null\n    }\n}\n</code></pre>"},{"location":"3-custom-rules/#register-your-rule","title":"Register your rule","text":"<p>After that, you just need to register in the set of rules:</p> <pre><code>popcornGuineapigConfig {\n    configuration = PopcornConfiguration(\n        project = PopcornProject(\n            type = ProjectType.JAVA\n        ),\n        rules = listOf(\n            MyRule(),\n        )\n    )\n}\n</code></pre>"},{"location":"4-reports/","title":"Reports \ud83d\udcc3","text":"<p>Starting from version <code>1.1.0</code>, you can enable report generation in your project.</p> <p>To configure this feature, add the following setting to your <code>build.gradle.kts</code> file:</p> <pre><code>popcornGuineapigConfig {\n    configuration = PopcornConfiguration(\n        ...\n        hasReportEnabled = true\n    )\n}\n</code></pre> <p>After you run the task, you can see a new report at  <code>/yourproject/yourmodule/build/reports/popcornguineapig/YYYY-MM-DD_HH-MM-SS_moduleName.md</code>.</p> <p>This report provides detailed insights into the module analyzed by PopcornGuineapig Check, including its  internal dependencies and the results of evaluating their relationships.</p>"},{"location":"5-contributions/","title":"Contributions \ud83e\udd1d","text":"<p>We encourage contributions of all types! Whether it\u2019s reporting issues, suggesting new features, or submitting pull requests, you\u2019re welcome to help improve the plugin.</p> <ul> <li>Check out the issues page for ideas.</li> <li>Feel free to submit pull requests.</li> </ul>"},{"location":"5-contributions/#some-tips","title":"Some tips","text":"<ul> <li> <p>We primarily use IntelliJ IDEA for developing new features and fixing bugs. While it\u2019s possible to use Android Studio, IntelliJ IDEA is the more convenient option, especially since we are working on a Gradle plugin;</p> </li> <li> <p>When developing a new architecture rule, make sure to write unit tests for it. Additionally, you can create a sample in the sample directory to simulate the architecture violation;</p> </li> <li> <p>If you have any questions about contributions, feel free to reach out to someone from CodandoTV. You can contact Gabriel Moro or Rodrigo Vianna.</p> </li> </ul> <p>\ud83e\udd17 Happy coding!</p>"}]}